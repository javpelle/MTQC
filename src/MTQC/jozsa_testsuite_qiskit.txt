def init ():
	cr = ClassicalRegister(4)
	qr = QuantumRegister(5)
	qc = QuantumCircuit(qr, cr)

	def uf (qc, qr):
    		qc.cx(qr[0], qr[-1])

	deutschjozsa(qc, qr, cr, uf)

	ex = execute(qc, backend = Aer.get_backend('qasm_simulator'), shots = 1000)

	return ex.result().get_counts()
***
def init ():
	cr = ClassicalRegister(4)
	qr = QuantumRegister(5)
	qc = QuantumCircuit(qr, cr)

	def uf (qc, qr):
    		qc.i(qr[-1])

	deutschjozsa(qc, qr, cr, uf)

	ex = execute(qc, backend = Aer.get_backend('qasm_simulator'), shots = 1000)

	# Add any operations if needed
	return ex.result().get_counts()
***
def init ():
	cr = ClassicalRegister(4)
	qr = QuantumRegister(5)
	qc = QuantumCircuit(qr, cr)

	def uf (qc, qr):
    		qc.x(qr[-1])

	deutschjozsa(qc, qr, cr, uf)

	ex = execute(qc, backend = Aer.get_backend('qasm_simulator'), shots = 1000)

	# Add any operations if needed
	return ex.result().get_counts()
***